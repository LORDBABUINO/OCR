#import numpy
import sys
import time
from PIL import Image

def imgArr(myImage):

    # Create array of image values
    imgArr = []

    # Get height and width values
    height = myImage.height
    width = myImage.width

    # Get all rows
    for i in range(height):
        row = []

        # Add each value to the row
        for j in range(width):
            row.append(myImage.getpixel((j,i)))

        # Append the row to the main array
        imgArr.append(row)

    return imgArr

# Input:
#    myImage: the padded image to apply the filter to
#    matrix: the matrix to use to multiply the image by
# Output:
#    Filtered image
def applyFilter(myImage, kernel):
    img = myImage
    i = 0  #initialize counter
    j = 0
    filtered = Image.new("L", (img.width - 2, img.height - 2))  #create new image 

    imageArray = []        #used to pass pixels to convolution function
    
    for i in range(1, img.width - 1):    #for every pixel within padding
        for j in range(1, img.height - 1):
            del imageArray[:]        #clear imageArray each loop
            imageArray.append(img.getpixel((i-1, j-1)))      #populate imageArray with top left pixel
            imageArray.append(img.getpixel((i, j-1)))        #populate imageArray with top middle pixel
            imageArray.append(img.getpixel((i+1, j-1)))      #populate imageArray with top right pixel
            imageArray.append(img.getpixel((i-1, j)))        #populate imageArray with middle left pixel
            imageArray.append(img.getpixel((i, j)))          #populate imageArray with middle pixel
            imageArray.append(img.getpixel((i+1, j)))        #populate imageArray with middle right pixel
            imageArray.append(img.getpixel((i-1, j+1)))      #populate imageArray with bottom left pixel
            imageArray.append(img.getpixel((i, j+1)))        #populate imageArray with bottom middle pixel
            imageArray.append(img.getpixel((i+1, j+1)))      #populate imageArray with bottom right pixel
            filtered.putpixel((i- 1, j- 1), convolute(imageArray, kernel))    #write result of convolution to new image
    return filtered

def convolute(image,kernel):
    temp = 0        #used to store current convolution sum
    
    for i in range(0, len(image)):
        temp = temp + (image[i]*kernel[i])    #increment temp by result of image pixel * kernel pixel

    return temp

#contains the 20 rules for thinning.
def thinning(myImage):
    
    # to identify each pixel 
    # (i-1,j-1)|(i,j-1)|(i+1,j-1)
    #----------------------------
    #  (i-1,j) | (i,j) |(i+1,j)
    #----------------------------
    # (i-1,j+1)|(i,j+1)|(i+1,j+1)
    
    img = myImage
    
    imgA= []        #used to get the pixels around the pixel in question
    
    for i in range(1, img.width - 1):    #for every pixel within padding
        for j in range(1, img.height - 1):
            del imgA[:]        #clear imageArray each loop
            imgA.append(img.getpixel((i-1, j-1)))      #populate imageArray with top left pixel
            imgA.append(img.getpixel((i, j-1)))        #populate imageArray with top middle pixel
            imgA.append(img.getpixel((i+1, j-1)))      #populate imageArray with top right pixel
            imgA.append(img.getpixel((i-1, j)))        #populate imageArray with middle left pixel
            imgA.append(img.getpixel((i, j)))          #populate imageArray with middle pixel
            imgA.append(img.getpixel((i+1, j)))        #populate imageArray with middle right pixel
            imgA.append(img.getpixel((i-1, j+1)))      #populate imageArray with bottom left pixel
            imgA.append(img.getpixel((i, j+1)))        #populate imageArray with bottom middle pixel
            imgA.append(img.getpixel((i+1, j+1)))      #populate imageArray with bottom right pixel
            #rule 1
            if (imgA[0]==1 and imgA[3]==1 and imgA[4]==1 and imgA[6]==1 and imgA[7]==1 and imgA[2]==0 and imgA[5]==0):
                imgA[4] == 0
            
            #rule 2
            elif (imgA[0]==1 and imgA[1]==1 and imgA[3]==1 and imgA[4]==1 and imgA[6]==1 and imgA[5]==0 and imgA[8]==0):
                imgA[4] ==0
            
            #rule 3 
            elif (imgA[0]==1 and imgA[1]==1 and imgA[2]==1 and imgA[4]==1 and imgA[5]==1 and imgA[6]==0 and imgA[7]==0):
                imgA[4] ==0
                
            #rule 4
            elif (imgA[0]==1 and imgA[1]==1 and imgA[2]==1 and imgA[3]==1 and imgA[4]==1 and imgA[7]==0 and imgA[8]==0):
                imgA[4] ==0
            
            #rule 5
            elif (imgA[0]==1 and imgA[3]==1 and imgA[4]==1 and imgA[2]==0 and imgA[5]==0 and imgA[7]==0 and imgA[8]==0):
                imgA[4] ==0
                
            #rule 6 
            elif (imgA[0]==1 and imgA[1]==1 and imgA[4]==1 and imgA[5]==0 and imgA[6]==0 and imgA[7]==0 and imgA[8]==0):
                imgA[4] ==0
                
            #rule 7
            elif (imgA[0]==1 and imgA[1]==1 and imgA[2]==1 and imgA[3]==1 and imgA[4]==1 and imgA[6]==1 and imgA[7]==1 and imgA[8]==1 and imgA[5]==0):
                imgA[4] ==0
                
            #rule 8
            elif (imgA[0]==1 and imgA[1]==1 and imgA[2]==1 and imgA[3]==1 and imgA[4]==1 and imgA[5]==1 and imgA[6]==1 and imgA[8]==1 and imgA[7]==0):
                imgA[4] ==0 
                
            #rule 9
            elif (imgA[3]==1 and imgA[4]==1 and imgA[6]==1 and imgA[1]==0 and imgA[2]==0 and imgA[5]==0 and imgA[8]==0):
                imgA[4] ==0
                
            #rule 10
            elif (imgA[4]==1 and imgA[6]==1 and imgA[7]==1 and imgA[0]==0 and imgA[1]==0 and imgA[2]==0 and imgA[5]==0):
                imgA[4] ==0
            #rule 11
            elif (imgA[1]==1 and imgA[2]==1 and imgA[4]==1 and imgA[3]==0 and imgA[6]==0 and imgA[7]==0 and imgA[8]==0):
                imgA[4] == 0
            
            #rule 12
            elif (imgA[2]==1 and imgA[4]==1 and imgA[5]==1 and imgA[0]==0 and imgA[3]==0 and imgA[6]==0 and imgA[7]==0):
                imgA[4] ==0
            
            #rule 13 
            elif (imgA[4]==1 and imgA[7]==1 and imgA[8]==1 and imgA[0]==0 and imgA[1]==0 and imgA[2]==0 and imgA[3]==0):
                imgA[4] ==0
                
            #rule 14
            elif (imgA[4]==1 and imgA[5]==1 and imgA[8]==1 and imgA[0]==0 and imgA[1]==0 and imgA[3]==0 and imgA[6]==0):
                imgA[4] ==0
            
            #rule 15
            elif (imgA[0]==1 and imgA[1]==1 and imgA[2]==1 and imgA[4]==1 and imgA[5]==1 and imgA[6]==1 and imgA[7]==1 and imgA[8]==1 and imgA[3]==0):
                imgA[4] ==0
                
            #rule 16 
            elif (imgA[0]==1 and imgA[2]==1 and imgA[3]==1 and imgA[4]==1 and imgA[5]==1 and imgA[6]==1 and imgA[7]==1 and imgA[8]==1 and imgA[1]==0):
                imgA[4] ==0
                
            #rule 17
            elif (imgA[2]==1 and imgA[4]==1 and imgA[5]==1 and imgA[7]==1 and imgA[8]==1 and imgA[0]==0 and imgA[3]==0):
                imgA[4] ==0
                
            #rule 18
            elif (imgA[1]==1 and imgA[2]==1 and imgA[4]==1 and imgA[5]==1 and imgA[8]==1 and imgA[3]==0 and imgA[6]==0):
                imgA[4] ==0 
                
            #rule 19
            elif (imgA[4]==1 and imgA[5]==1 and imgA[6]==1 and imgA[7]==1 and imgA[8]==1 and imgA[0]==0 and imgA[1]==0):
                imgA[4] ==0
                
            #rule 20
            elif (imgA[3]==1 and imgA[4]==1 and imgA[6]==1 and imgA[7]==1 and imgA[8]==1 and imgA[1]==0 and imgA[2]==0):
                imgA[4] ==0
    
    return 
    
def addPadding(im):
    filtered = Image.new("L", (im.width + 2, im.height + 2), color = 0) #create new image that is 2 pixels wider and taller than the original

    filtered.paste(im, (1, 1), None) #copy image into new image with padding of a 1 pixel border around

    return filtered

def kernel_matrix():
    kernel = [-1,-1,-1,-1,8,-1,-1,-1,-1]
    return kernel

def main ():
    #formatting for the main menu
    print("{0:-^50s}".format(''))
    print("{0:-^50s}".format('  Main Menu  '))
    print("{0:-^50s}".format(''))
    print("{0:^50s}".format('Welcome to the CP467 Final Project demo.'))
    print()
    
    # gives the user the choice of whether to run the program or end
    print("{0:^50s}".format('1. Run demo'))
    print("{0:^50s}".format('2. Quit'))
    
    #adds blanks lines and waits for the user input 
    print()
    menuoption = input('Enter your choice here: ')
    print()
    
    # menu option 1 is chosen
    if menuoption == "1":
        print("Demo started")
        
        # gets the filename from the user, opens the file, and tells user it imported successfully
        filename = input('Please enter the filename for the image you\'d like to use: ')
        im = Image.open(filename)
        print("Image imported")
        
        img = addPadding(im)
        myImage = applyFilter(img,kernel_matrix())
    # CODE FOR FILTERING GOES HERE
        
        # Shows the user the image
        myImage.show()
    
    # menu option 2 is chosen
    elif menuoption == "2":
       
        # exits the program
        print("Quitting program..")
        time.sleep(1.5)
        sys.exit
        
main()